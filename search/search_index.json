{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"badfiles \u00b6 A malicious file detection engine written with Python and Yara. Free software: Apache-2.0 Documentation: https://badfiles.readthedocs.io Features \u00b6 TODO Credits \u00b6 This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"home"},{"location":"#badfiles","text":"A malicious file detection engine written with Python and Yara. Free software: Apache-2.0 Documentation: https://badfiles.readthedocs.io","title":"badfiles"},{"location":"#features","text":"TODO","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Badfile dataclass \u00b6 The class that implements the badfiles detection engine. Attributes: Name Type Description zip_rules Optional[str] The path to yara detection rules for zip files (defaults to ./rules/zip_rules.yara) tar_rules Optional[str] The path to yara detection rules for tar files (defaults to ./rules/tar_rules.yara) csv_rules Optional[str] The path to yara detection rules for tar files (defaults to ./rules/csv_rules.yara) is_badfile ( self , f ) \u00b6 This function checks for various indicators of potentially malicious content including: - Mime Type confusion; - Zip files with high compression rates and; - Hands f to the proper yara detection rules. Parameters: Name Type Description Default f PathLike The path of the file to be analyzed required Returns: Type Description BadfileMsg The BadfileMsg named tuple Source code in badfiles/badfiles.py def is_badfile ( self , f : PathLike ) -> BadfileMsg : \"\"\"This function checks for various indicators of potentially malicious content including: - Mime Type confusion; - Zip files with high compression rates and; - Hands f to the proper yara detection rules. Args: f (PathLike): The path of the file to be analyzed Returns: BadfileMsg: The BadfileMsg named tuple \"\"\" is_mime_confusion = self . _mime_type_confusion ( f ) if is_mime_confusion [ 0 ] is False : return BadfileMsg ( Classification . UNSAFE . value , f \"Deceptive extension. File extension suggests { is_mime_confusion [ 2 ] } inspection shows { is_mime_confusion [ 1 ] } \" , pathlib . Path ( f ) . name , ) if is_mime_confusion [ 1 ] == \"application/zip\" : if self . _high_compression ( f ): return BadfileMsg ( Classification . UNSAFE . value , \"high compression rate\" , pathlib . Path ( f ) . name ) return self . _rule_factory ( f , is_mime_confusion [ 1 ]) BadfileMsg ( tuple ) \u00b6 BadfileMsg(classification, message, file) __getnewargs__ ( self ) special \u00b6 Return self as a plain tuple. Used by copy and pickle. Source code in badfiles/badfiles.py def __getnewargs__ ( self ): 'Return self as a plain tuple. Used by copy and pickle.' return _tuple ( self ) __new__ ( _cls , classification , message , file ) special staticmethod \u00b6 Create new instance of BadfileMsg(classification, message, file) __repr__ ( self ) special \u00b6 Return a nicely formatted representation string Source code in badfiles/badfiles.py def __repr__ ( self ): 'Return a nicely formatted representation string' return self . __class__ . __name__ + repr_fmt % self Classification ( Enum ) \u00b6 The results returned by the BadFile class Attributes: Name Type Description SAFE str Nothing malicious was detected. UNSAFE str Malicious content was detected. NOT_IMPLEMENTED str The file type has not been implemented in the detection engine. UNKNOWN str The file type cannot be determined. find_dde ( doc_dir ) \u00b6 Iterates through doc_dir and searches for a directory called externalLinks. Parameters: Name Type Description Default doc_dir PathLike The target directory to be analyzed. required Returns: Type Description bool True if a folder called externalLinks otherwise returns False. Source code in badfiles/utils.py def find_dde ( doc_dir : Path ) -> bool : \"\"\"Iterates through doc_dir and searches for a directory called externalLinks. Args: doc_dir (PathLike): The target directory to be analyzed. Returns: bool: True if a folder called externalLinks otherwise returns False. \"\"\" p = Path ( doc_dir ) dde = False for i in p . glob ( \"**/*\" ): if i . name . lower () == \"externallinks\" : dde = True shutil . rmtree ( doc_dir ) return dde process_tar ( f , chunk = 512 ) \u00b6 A generator function that yields tar file headers. Parameters: Name Type Description Default f PathLike The path the the tar file. required chunk int The size of the tarfile chunks. Defaults to 512. 512 Yields Generator[bytes, None, None]: Tar file header(s). Source code in badfiles/utils.py def process_tar ( f : str , chunk : int = 512 ) -> Generator [ bytes , None , None ]: \"\"\"A generator function that yields tar file headers. Args: f (PathLike): The path the the tar file. chunk (int, optional): The size of the tarfile chunks. Defaults to 512. Yields: Generator[bytes, None, None]: Tar file header(s). \"\"\" with open ( f , \"rb\" ) as f : for fh in iter ( partial ( f . read , chunk ), b \"\" ): try : data = fh # size = data.decode(\"ascii\")[124:135] # print(size) if data . decode ( \"ascii\" )[ 257 : 262 ] == \"ustar\" and data [ 125 : 135 ] . isascii (): yield data except ( UnicodeDecodeError , ValueError ): pass unzip_doc ( doc , dir = PosixPath ( '/home/runner/work/badfiles/badfiles/tmp_doc' )) \u00b6 Unzips a document to enable the find_dde function. Parameters: Name Type Description Default doc PathLike The path to the document to unzip required dir str The directory to unzip the document. Defaults to \"./tmp_doc\". PosixPath('/home/runner/work/badfiles/badfiles/tmp_doc') Returns: Type Description PathLike The directory of the unzipped document. Source code in badfiles/utils.py def unzip_doc ( doc : PathLike , dir = pathlib . Path ( RULE_DIR ) . parent / \"./tmp_doc\" ) -> PathLike : \"\"\"Unzips a document to enable the find_dde function. Args: doc (PathLike): The path to the document to unzip dir (str, optional): The directory to unzip the document. Defaults to \"./tmp_doc\". Returns: PathLike: The directory of the unzipped document. \"\"\" z = zipfile . ZipFile ( doc ) z . extractall ( path = dir ) return dir","title":"modules"},{"location":"api/#badfiles.badfiles.Badfile","text":"The class that implements the badfiles detection engine. Attributes: Name Type Description zip_rules Optional[str] The path to yara detection rules for zip files (defaults to ./rules/zip_rules.yara) tar_rules Optional[str] The path to yara detection rules for tar files (defaults to ./rules/tar_rules.yara) csv_rules Optional[str] The path to yara detection rules for tar files (defaults to ./rules/csv_rules.yara)","title":"Badfile"},{"location":"api/#badfiles.badfiles.Badfile.is_badfile","text":"This function checks for various indicators of potentially malicious content including: - Mime Type confusion; - Zip files with high compression rates and; - Hands f to the proper yara detection rules. Parameters: Name Type Description Default f PathLike The path of the file to be analyzed required Returns: Type Description BadfileMsg The BadfileMsg named tuple Source code in badfiles/badfiles.py def is_badfile ( self , f : PathLike ) -> BadfileMsg : \"\"\"This function checks for various indicators of potentially malicious content including: - Mime Type confusion; - Zip files with high compression rates and; - Hands f to the proper yara detection rules. Args: f (PathLike): The path of the file to be analyzed Returns: BadfileMsg: The BadfileMsg named tuple \"\"\" is_mime_confusion = self . _mime_type_confusion ( f ) if is_mime_confusion [ 0 ] is False : return BadfileMsg ( Classification . UNSAFE . value , f \"Deceptive extension. File extension suggests { is_mime_confusion [ 2 ] } inspection shows { is_mime_confusion [ 1 ] } \" , pathlib . Path ( f ) . name , ) if is_mime_confusion [ 1 ] == \"application/zip\" : if self . _high_compression ( f ): return BadfileMsg ( Classification . UNSAFE . value , \"high compression rate\" , pathlib . Path ( f ) . name ) return self . _rule_factory ( f , is_mime_confusion [ 1 ])","title":"is_badfile()"},{"location":"api/#badfiles.badfiles.BadfileMsg","text":"BadfileMsg(classification, message, file)","title":"BadfileMsg"},{"location":"api/#badfiles.badfiles.BadfileMsg.__getnewargs__","text":"Return self as a plain tuple. Used by copy and pickle. Source code in badfiles/badfiles.py def __getnewargs__ ( self ): 'Return self as a plain tuple. Used by copy and pickle.' return _tuple ( self )","title":"__getnewargs__()"},{"location":"api/#badfiles.badfiles.BadfileMsg.__new__","text":"Create new instance of BadfileMsg(classification, message, file)","title":"__new__()"},{"location":"api/#badfiles.badfiles.BadfileMsg.__repr__","text":"Return a nicely formatted representation string Source code in badfiles/badfiles.py def __repr__ ( self ): 'Return a nicely formatted representation string' return self . __class__ . __name__ + repr_fmt % self","title":"__repr__()"},{"location":"api/#badfiles.badfiles.Classification","text":"The results returned by the BadFile class Attributes: Name Type Description SAFE str Nothing malicious was detected. UNSAFE str Malicious content was detected. NOT_IMPLEMENTED str The file type has not been implemented in the detection engine. UNKNOWN str The file type cannot be determined.","title":"Classification"},{"location":"api/#badfiles.utils.find_dde","text":"Iterates through doc_dir and searches for a directory called externalLinks. Parameters: Name Type Description Default doc_dir PathLike The target directory to be analyzed. required Returns: Type Description bool True if a folder called externalLinks otherwise returns False. Source code in badfiles/utils.py def find_dde ( doc_dir : Path ) -> bool : \"\"\"Iterates through doc_dir and searches for a directory called externalLinks. Args: doc_dir (PathLike): The target directory to be analyzed. Returns: bool: True if a folder called externalLinks otherwise returns False. \"\"\" p = Path ( doc_dir ) dde = False for i in p . glob ( \"**/*\" ): if i . name . lower () == \"externallinks\" : dde = True shutil . rmtree ( doc_dir ) return dde","title":"find_dde()"},{"location":"api/#badfiles.utils.process_tar","text":"A generator function that yields tar file headers. Parameters: Name Type Description Default f PathLike The path the the tar file. required chunk int The size of the tarfile chunks. Defaults to 512. 512 Yields Generator[bytes, None, None]: Tar file header(s). Source code in badfiles/utils.py def process_tar ( f : str , chunk : int = 512 ) -> Generator [ bytes , None , None ]: \"\"\"A generator function that yields tar file headers. Args: f (PathLike): The path the the tar file. chunk (int, optional): The size of the tarfile chunks. Defaults to 512. Yields: Generator[bytes, None, None]: Tar file header(s). \"\"\" with open ( f , \"rb\" ) as f : for fh in iter ( partial ( f . read , chunk ), b \"\" ): try : data = fh # size = data.decode(\"ascii\")[124:135] # print(size) if data . decode ( \"ascii\" )[ 257 : 262 ] == \"ustar\" and data [ 125 : 135 ] . isascii (): yield data except ( UnicodeDecodeError , ValueError ): pass","title":"process_tar()"},{"location":"api/#badfiles.utils.unzip_doc","text":"Unzips a document to enable the find_dde function. Parameters: Name Type Description Default doc PathLike The path to the document to unzip required dir str The directory to unzip the document. Defaults to \"./tmp_doc\". PosixPath('/home/runner/work/badfiles/badfiles/tmp_doc') Returns: Type Description PathLike The directory of the unzipped document. Source code in badfiles/utils.py def unzip_doc ( doc : PathLike , dir = pathlib . Path ( RULE_DIR ) . parent / \"./tmp_doc\" ) -> PathLike : \"\"\"Unzips a document to enable the find_dde function. Args: doc (PathLike): The path to the document to unzip dir (str, optional): The directory to unzip the document. Defaults to \"./tmp_doc\". Returns: PathLike: The directory of the unzipped document. \"\"\" z = zipfile . ZipFile ( doc ) z . extractall ( path = dir ) return dir","title":"unzip_doc()"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/jeffallan/badfiles/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 badfiles could always use more documentation, whether as part of the official badfiles docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/jeffallan/badfiles/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up badfiles for local development. Fork the badfiles repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/badfiles.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/jeffallan/badfiles/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_badfiles ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/jeffallan/badfiles/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"badfiles could always use more documentation, whether as part of the official badfiles docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/jeffallan/badfiles/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up badfiles for local development. Fork the badfiles repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/badfiles.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/jeffallan/badfiles/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_badfiles ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2021-09-30) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2021-09-30","text":"First release on PyPI.","title":"0.1.0 (2021-09-30)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install badfiles, run this command in your terminal: 1 $ pip install badfiles This is the preferred method to install badfiles, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for badfiles can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/jeffallan/badfiles Or download the tarball : 1 $ curl -OJL https://github.com/jeffallan/badfiles/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install badfiles, run this command in your terminal: 1 $ pip install badfiles This is the preferred method to install badfiles, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for badfiles can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/jeffallan/badfiles Or download the tarball : 1 $ curl -OJL https://github.com/jeffallan/badfiles/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use badfiles in a project 1 import badfiles","title":"usage"},{"location":"usage/#usage","text":"To use badfiles in a project 1 import badfiles","title":"Usage"}]}